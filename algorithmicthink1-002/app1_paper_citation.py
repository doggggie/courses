"""
Paper citation. 
"""

# general imports
#import urllib2
import random
import numpy as np
import matplotlib as mpl
import matplotlib.pyplot as plt

# Set timeout for CodeSkulptor if necessary
#import codeskulptor
#codeskulptor.set_timeout(20)


###################################
# Code for loading citation graph

CITATION_URL = "http://storage.googleapis.com/codeskulptor-alg/alg_phys-cite.txt"
CITATION_FILE = "alg_phys-cite.txt"

def load_graph(citation_filename):
    """
    Function that loads a graph given the URL
    for a text representation of the graph
    
    Returns a dictionary that models a graph
    """
#    graph_file = urllib2.urlopen(graph_url)
    graph_file = open(citation_filename, 'r')
    graph_text = graph_file.read()
    graph_lines = graph_text.split('\n')
    graph_lines = graph_lines[ : -1]
    
    print "Loaded graph with", len(graph_lines), "nodes"
    
    answer_graph = {}
    for line in graph_lines:
        neighbors = line.split(' ')
        node = int(neighbors[0])
        answer_graph[node] = set([])
        for neighbor in neighbors[1 : -1]:
            answer_graph[node].add(int(neighbor))

    return answer_graph


def make_er_graph(num_nodes, probability):
    """
    Return a directed graph generated by ER algorithm.
    """
    if num_nodes <= 0:
        return dict()
        
    graph = {}
    for node in range(num_nodes):
        nodes = range(num_nodes)
        nodes.remove(node)
        rands = np.random.random_sample(num_nodes - 1)
        graph[node] = set(np.array(nodes)[rands < probability])
    return graph

def make_complete_graph(num_nodes):
    """
    Return the complete directed graph with 
    the specified number of nodes.
    """
    if num_nodes <= 0:
        return dict()
        
    graph = {}
    for node in range(num_nodes):
        nodes = range(num_nodes)
        nodes.remove(node)
        graph[node] = set(nodes)
    return graph

def compute_avg_out_degree(digraph):
    """
    Computes average out-degrees for the nodes in the graph.
    """
    total_out_degree = sum([len(x) for x in digraph.values()])
    return total_out_degree / float(len(digraph))
        
def compute_in_degrees(digraph):
    """
    Computes the in-degrees for the nodes in the graph.
    """
    indegrees = {node: 0 for node in digraph}
    for head in digraph:
        for tail in digraph[head]:
            indegrees[tail] += 1
    return indegrees
    
def in_degree_distribution(digraph):
    """
    Computes the unnormalized distribution of the in-degrees of the graph.
    """
    distr = {}
    indegs = compute_in_degrees(digraph)
    for node in indegs:
        deg = indegs[node]
        if deg not in distr:
            distr[deg] = 1
        else:
            distr[deg] += 1
    return distr
    
    
class DPATrial:
    """
    Simple class to encapsulate optimized trials for DPA algorithm
    
    Maintains a list of node numbers with multiple instances of each number.
    The number of instances of each node number are
    in the same proportion as the desired probabilities
    
    Uses random.choice() to select a node number from this list for each trial.
    """

    def __init__(self, num_nodes):
        """
        Initialize a DPATrial object corresponding to a 
        complete graph with num_nodes nodes
        
        Note the initial list of node numbers has num_nodes copies of
        each node number
        """
        self._num_nodes = num_nodes
        self._node_numbers = [node for node in range(num_nodes) for dummy_idx in range(num_nodes)]


    def run_trial(self, num_nodes):
        """
        Conduct num_node trials using by applying random.choice()
        to the list of node numbers
        
        Updates the list of node numbers so that the number of instances of
        each node number is in the same ratio as the desired probabilities
        
        Returns:
        Set of nodes
        """
        
        # compute the neighbors for the newly-created node
        new_node_neighbors = set()
        for dummy_idx in range(num_nodes):
            new_node_neighbors.add(random.choice(self._node_numbers))
        
        # update the list of node numbers so that each node number 
        # appears in the correct ratio
        self._node_numbers.append(self._num_nodes)
        self._node_numbers.extend(list(new_node_neighbors))
        
        #update the number of nodes
        self._num_nodes += 1
        return new_node_neighbors
    

def make_dpa_graph(num_nodes, num_conns):
    graph = make_complete_graph(num_conns)
    for newnode in range(num_conns, num_nodes):
        # add new node
#        in_degrees = compute_in_degrees(graph)
#        total_in_degree = sum(in_degrees.values())
        new_node_neighbors = set(np.random.random_integers(0, newnode - 1, num_conns))
        
#        print "graph", graph
#        print " newnode", newnode
#        print " in_degrees", in_degrees
#        print " total_in_degree", total_in_degree
#        print "  new_node_neighbors", new_node_neighbors
        
        graph[newnode] = set()
        for old_node in new_node_neighbors:
#            randnum = np.random.random_sample()
#            probability = (in_degrees.get(old_node, 0) + 1) / float(total_in_degree + newnode)


#            print "    oldnode / randnum  / prob ", old_node, randnum, probability            
            
#            if randnum < probability:
#                graph[newnode].add(old_node)
            graph[newnode].add(old_node)

    return graph

            
citation_graph = load_graph(CITATION_FILE)


def prepare_distribution_plot(graph):
    distr = in_degree_distribution(graph)
    normalize_factor = sum(distr.values())

    x = np.sort(distr.keys())
    y = np.zeros(len(x))
    for i in range(len(x)):
        y[i] = distr[x[i]] / float(normalize_factor)
    
    return x, y

er = False

plt.figure()            
xc, yc = prepare_distribution_plot(citation_graph)
#plt.subplot(1,1,1)
plt.loglog(xc, yc, 'b')
plt.xlim(1, 2600)
plt.title("In-degree distribution for the citation graph")    
plt.xlabel("Number of times being cited (in-degree)")
plt.ylabel("Normalized distribution")


if er:
    plt.figure()
    er_graph = make_er_graph(500, 0.5)
    xe, ye = prepare_distribution_plot(er_graph)
    #plt.subplot(1,3,2)
    plt.plot(xe, ye, 'r')
    plt.title("In-degree distribution for an ER graph")    
    plt.xlabel("In-degree")
    plt.ylabel("Normalized distribution")

plt.figure()
n = len(citation_graph)
m = int(compute_avg_out_degree(citation_graph) + 0.5)
dpa_graph = make_dpa_graph(n, m)
xd, yd = prepare_distribution_plot(dpa_graph)
#plt.subplot(1,3,3)
plt.loglog(xd, yd, 'g')
plt.title("In-degree distribution for a DPA graph (n=27770, m=13)")    
plt.xlabel("In-degree")
plt.ylabel("Normalized distribution")


plt.figure()

plt.hold(True)
plt.loglog(xc, yc, 'b', label="Citation")
plt.loglog(xd, yd, 'g', label="DPA")
if er:
    plt.loglog(xe, ye, 'r', label="ER")
plt.title("In-degree distributions comparison")    
plt.xlabel("In-degree")
plt.ylabel("Normalized distribution")
plt.legend()

plt.show()
    